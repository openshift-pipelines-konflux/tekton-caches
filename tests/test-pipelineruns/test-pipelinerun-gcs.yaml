apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  name: pipelinerun-gcs-e2e-test
spec:
  pipelineSpec:
    params:
      - name: repo_url
        type: string
      - name: revision
        type: string
      - name: registry
        type: string
      - name: buildCommand
        type: string
        default: go build -v .
      - name: cachePatterns
        type: array
        default: [ "**go.mod", "**go.sum" ]
      - name: image
        type: string
        default: golang:latest
      - name: FORCE_CACHE_UPLOAD
        type: string
        default: "false"
    workspaces:
      - name: source
      - name: cred
      - name: test
    tasks:
      - displayName: Build go application
        name: build-task
        workspaces:
          - name: source
            workspace: source
          - name: test
            workspace: test
        taskSpec:
          workspaces:
            - name: source
            - name: cred
            - name: test
          params:
            - name: buildCommand
              default: $(params.buildCommand)
            - name: cachePatterns
              default: $(params.cachePatterns)
            - name: image
              default: $(params.image)
          stepTemplate:
            env:
            - name: "STORAGE_EMULATOR_HOST"
              value: "gcs-emulator.tekton-pipelines.svc.cluster.local:9000"
          steps:
            - name: create-repo
              image: $(params.image)
              script: |
                mkdir -p $(workspaces.source.path)/repo
                chmod 777 $(workspaces.source.path)/repo
            - name: fetch-repo
              ref:
                name: git-clone
              params:
                - name: output-path
                  value: $(workspaces.source.path)/repo
                - name: url
                  value: $(params.repo_url)
                - name: revision
                  value: $(params.revision)
            - name: cache-fetch
              ref:
                name: cache-fetch
              params:
                - name: PATTERNS
                  value: $(params.cachePatterns)
                - name: SOURCE
                  value: $(params.registry)/cache-go:{{hash}}
                - name: CACHE_PATH
                  value: $(workspaces.source.path)/cache
                - name: WORKING_DIR
                  value: $(workspaces.source.path)/repo
                - name: AWS_SHARED_CREDENTIALS_FILE
                  value: $(workspaces.cred.path)/credentials
                - name: AWS_CONFIG_FILE
                  value: $(workspaces.cred.path)/config
                - name: GOOGLE_APPLICATION_CREDENTIALS
                  value: $(workspaces.cred.path)/creds.json

            - name: run-go-build
              workingDir: $(workspaces.source.path)/repo
              image: $(params.image)
              env:
                - name: GOCACHE
                  value: $(workspaces.source.path)/cache/gocache
                - name: GOMODCACHE
                  value: $(workspaces.source.path)/cache/gomodcache
              script: |
                set -x
                git config --global --add safe.directory $(workspaces.source.path)/repo
                $(params.buildCommand)
                echo "Cache size is $(du -sh $(workspaces.source.path)/cache)"
            - name: cache-upload
              ref:
                name: cache-upload
              params:
                - name: PATTERNS
                  value: $(params.cachePatterns)
                - name: TARGET
                  value: $(params.registry)/cache-go:{{hash}}
                - name: CACHE_PATH
                  value: $(workspaces.source.path)/cache
                - name: WORKING_DIR
                  value: $(workspaces.source.path)/repo
                - name: AWS_SHARED_CREDENTIALS_FILE
                  value: $(workspaces.cred.path)/credentials
                - name: AWS_CONFIG_FILE
                  value: $(workspaces.cred.path)/config
                - name: FORCE_CACHE_UPLOAD
                  value: $(params.FORCE_CACHE_UPLOAD)
                - name: GOOGLE_APPLICATION_CREDENTIALS
                  value: $(workspaces.cred.path)/creds.json
            - name: cache-fetch-test
              ref:
                name: cache-fetch
              params:
                - name: PATTERNS
                  value: $(params.cachePatterns)
                - name: SOURCE
                  value: $(params.registry)/cache-go:{{hash}}
                - name: CACHE_PATH
                  value: $(workspaces.test.path)/cache
                - name: WORKING_DIR
                  value: $(workspaces.source.path)/repo
                - name: AWS_SHARED_CREDENTIALS_FILE
                  value: $(workspaces.cred.path)/credentials
                - name: AWS_CONFIG_FILE
                  value: $(workspaces.cred.path)/config
                - name: GOOGLE_APPLICATION_CREDENTIALS
                  value: $(workspaces.cred.path)/creds.json
            - name: validate-cache
              workingDir: $(workspaces.test.path)/cache
              image: $(params.image)
              env:
                - name: GOCACHE
                  value: $(workspaces.source.path)/cache/gocache
                - name: GOMODCACHE
                  value: $(workspaces.source.path)/cache/gomodcache
              script: |
                set -x
                echo "Cache size is $(du -sh $(workspaces.test.path)/cache)"
                if [ $(du -shb $(workspaces.test.path)/cache | cut -f1) -lt 1000 ] ;then
                      echo "cache fetch failed"
                      exit 1
                fi
                exit 0
  params:
    - name: repo_url
      value: https://github.com/chmouel/go-helloworld
    - name: revision
      value: main
    - name: registry
      value: gs://tekton-cache
    - name: buildCommand
      value: go build -v ./
    - name: image
      value: golang:1.24
  workspaces:
    - name: cred
      secret:
        secretName: creds
    - name: source
      emptyDir: {}
    - name: test
      emptyDir: {}
